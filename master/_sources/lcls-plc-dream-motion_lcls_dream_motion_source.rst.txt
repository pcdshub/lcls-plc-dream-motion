

DUTs
----


ENUM_AxisStates
^^^^^^^^^^^^^^^

::

    {attribute 'qualified_only'}
    {attribute 'strict'}
    {attribute 'to_string'}
    TYPE ENUM_AxisStates :
    (
        UNKNOWN := 0, // UNKNOWN must be in slot 0 or the FB breaks
        OUT := 1,
        SI3N4 := 2,
        FR_YAG := 3,
        CL_YAG := 4,
        OPEN := 5,
        SMA := 6
    ) UINT;
    END_TYPE


Related:
    * `ENUM_AxisStates`_


GVLs
----


GVL_EPS
^^^^^^^

::

    {attribute 'qualified_only'}
    VAR_GLOBAL
        (*
        {attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^Term 35 (EK1100)^B950-100H1-R02-PNL-01_E2^Channel 1^Input'}
        {attribute 'pytmc' := '
            pv: "DREAM:SL:STATUS",
            field: "DREAM Safety Loop Status",
            field: "ZNAM OPEN",
            field: "ONAM CLOSED"
        '}
        bSafetyLoopStatus AT %I* : BOOL;

        {attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^Term 35 (EK1100)^B950-100H1-R02-PNL-01_E1^Channel 1^Output'}
        {attribute 'pytmc' := '
            pv: "DREAM:SL:ENABLE",
            field: "DREAM Safety Loop Enable",
            field: "ZNAM OPEN",
            field: "ONAM CLOSED"
        '}
        bSafetyLoopEnable AT %Q*: BOOL;
        *)
    END_VAR




GVL_PLC_Interfaces
^^^^^^^^^^^^^^^^^^

::

    //{attribute 'qualified_only'}
    VAR_GLOBAL
        (*
        (*ETHERCAT BRRIDGE COM STATUS*)
        //0: Other side is in OP state, >0: Error
        {attribute 'TcLinkTo' := 'TIIB[R19_DRL_02_E3_EL6695]^SYNC Inputs^TxPDO state
        '}
        xEcatBridge_TxPDO_state AT %I* :BOOL;

        //0: External device connectd, 1: External device not connected

        {attribute := 'TIIB[R19_DRL_02_E3_EL6695]^SYNC Inputs^External device not connected
        '}
        xEcatBridge_External_device_not_connected AT %I* : BOOL;

        //0 = Data valid, 1 = Data invalid
        {attribute 'TcLinkTo' := 'TIIB[R19_DRL_02_E3_EL6695]^WcState^WcState
        '}
        xEcatBridge_WcState AT %I* : BOOL;

        {attribute 'TcLinkTo' := 'TIIB[R19_DRL_02_E3_EL6695]^IO Inputs^DREAM_VRC_DP1_OPEN_LS'}
        bDREAM_VRC_DP1_OPEN_LS  AT %I* : BOOL;

        {attribute  'TcLinkTo' := 'TIIB[R19_DRL_02_E3_EL6695]^IO Outputs^DREAM_GNZ_Y_OUT'}
        xDREAM_GNZ_Y_OUT AT %Q*: BOOL;

        {attribute  'TcLinkTo' := 'TIIB[R19_DRL_02_E3_EL6695]^IO Outputs^DREAM_GNZ_Y_Ext_OUT'}
        xDREAM_GNZ_Y_Ext_OUT AT %Q*: BOOL;
        *)
    END_VAR




GVL_PMPS
^^^^^^^^

::

    {attribute 'qualified_only'}
    VAR_GLOBAL
        (*
        {attribute 'pytmc' := 'pv: DREAM:MOTION:ARB:01'}
        fbArbiter1: FB_Arbiter(1);

        {attribute 'pytmc' := 'pv: DREAM:MOTION:FFO:02'}
        fbFastFaultOutput1: FB_HardwareFFOutput := (bAutoReset := TRUE, i_sNetID:='172.21.92.73.1.1');
        *)
    END_VAR




Main
^^^^

::

    {attribute 'qualified_only'}
    VAR_GLOBAL
        {attribute 'pytmc' := 'pv: DREAM:MC:MMS:Y '}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E1]^STM Status^Status^Digital input 1;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E1]^STM Status^Status^Digital input 2;
                                  .nRawEncoderULINT     := TIIB[DRL_05_EL5042_E2]^FB Inputs Channel 1^Position'}
        M1: ST_MotionStage := (sName := 'DREAM:MC:MMS:Y ');

        {attribute 'pytmc' := 'pv: DREAM:COIL:MMS:ROLL '}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E3]^STM Status^Status^Digital input 1;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E3]^STM Status^Status^Digital input 2;
                                  .nRawEncoderINT     := TIIB[DRL_05_EL3064_E5]^AI Standard Channel 1^Value'}
        M2: ST_MotionStage := (sName := 'DREAM:COIL:MMS:ROLL ');

        {attribute 'pytmc' := 'pv: DREAM:COIL:MMS:YAW '}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E4]^STM Status^Status^Digital input 1;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E4]^STM Status^Status^Digital input 2;
                                  .nRawEncoderINT     := TIIB[DRL_05_EL3064_E5]^AI Standard Channel 2^Value'}
        M3: ST_MotionStage := (sName := 'DREAM:COIL:MMS:YAW ');

        {attribute 'pytmc' := 'pv: DREAM:GSJP:MMS:X '}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E6]^STM Status^Status^Digital input 1;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E6]^STM Status^Status^Digital input 2;
                                  .nRawEncoderINT     := TIIB[DRL_05_EL3064_E5]^AI Standard Channel 3^Value'}
        M4: ST_MotionStage := (sName := 'DREAM:GSJP:MMS:X ');

        {attribute 'pytmc' := 'pv: DREAM:GSJP:MMS:Z '}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E7]^STM Status^Status^Digital input 2;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E7]^STM Status^Status^Digital input 1;
                                  .nRawEncoderINT     := TIIB[DRL_05_EL3064_E5]^AI Standard Channel 4^Value'}
        M5: ST_MotionStage := (sName := 'DREAM:GSJP:MMS:Z ');

        {attribute 'pytmc' := 'pv: DREAM:GSJN:MMS:X'}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E9]^STM Status^Status^Digital input 2;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E9]^STM Status^Status^Digital input 1;
                                  .nRawEncoderULINT     := TIIB[DRL_05_EL5042_E2]^FB Inputs Channel 2^Position'}
        M6: ST_MotionStage := (sName := 'DREAM:GSJN:MMS:X');

        {attribute 'pytmc' := 'pv: DREAM:GSJN:MMS:Y'}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E10]^STM Status^Status^Digital input 2;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E10]^STM Status^Status^Digital input 1;
                                  .nRawEncoderULINT     := TIIB[DRL_05_EL5042_E11]^FB Inputs Channel 1^Position'}
        M7: ST_MotionStage := (sName := 'DREAM:GSJN:MMS:Y');

        {attribute 'pytmc' := 'pv: DREAM:GSJN:MMS:Z'}
        {attribute 'TcLinkTo' := '.bLimitForwardEnable  := TIIB[DRL_05_EL7047_E12]^STM Status^Status^Digital input 2;
                                  .bLimitBackwardEnable := TIIB[DRL_05_EL7047_E12]^STM Status^Status^Digital input 1;
                                  .nRawEncoderULINT     := TIIB[DRL_05_EL5042_E11]^FB Inputs Channel 2^Position'}
        M8: ST_MotionStage := (sName := 'DREAM:GSJN:MMS:Z');

        // In-Vacuum Motion
        (*
        {attribute 'pytmc':='pv: DREAM:DGPD:MMT:Y'}
        {attribute 'TcLinkTo' := '
            .nRawEncoderDINT		:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:Y^mode/status/pos/fError TxPDO^Position Actual Value
        '}
        M9 : ST_MotionStage := (sName:='DREAM:DGPD:MMT:Y',
                                nHomingMode:=E_EpicsHomeCmd.NONE,
                                // NB: Must be this 'DURING_MOTION'
                                nEnableMode:= ENUM_StageEnableMode.DURING_MOTION,
                                bPowerSelf:=TRUE,
                                bHardwareEnable:=TRUE );

        ////
        {attribute 'pytmc':='pv: DREAM:DGPD:MMT:X'}
        {attribute 'TcLinkTo' := '
            .nRawEncoderDINT		:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:X^mode/status/pos/fError TxPDO^Position Actual Value
        '}
        M10 : ST_MotionStage := (sName:='DREAM:DGPD:MMT:X',
                                 nHomingMode:=E_EpicsHomeCmd.NONE,
                                 // NB: Must be this 'DURING_MOTION'
                                 nEnableMode:= ENUM_StageEnableMode.DURING_MOTION,
                                 bPowerSelf:=TRUE,
                                 bHardwareEnable:=TRUE );
        ////
        {attribute 'pytmc':='pv: DREAM:DGPD:MMT:RET'}
        {attribute 'TcLinkTo' := '
            .nRawEncoderDINT		:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:RET^mode/status/pos/fError TxPDO^Position Actual Value
        '}
        M11 : ST_MotionStage := (	sName:='DREAM:DGPD:MMT:RET',
                                    nHomingMode:=E_EpicsHomeCmd.NONE,
                                    // NB: Must be this 'DURING_MOTION'
                                    nEnableMode:= ENUM_StageEnableMode.DURING_MOTION,
                                    bPowerSelf:=TRUE,
                                    bHardwareEnable:=TRUE );
        *)
    END_VAR




POUs
----


PRG_CoilMovers
^^^^^^^^^^^^^^

::

    PROGRAM PRG_CoilMovers
    VAR
        fb_Coil_Yaw : FB_MotionStage;
        fb_Coil_Roll : FB_MotionStage;
        bInit : BOOL := TRUE;
    END_VAR
    IF ( bInit) THEN
        bInit := FALSE;
        Main.M2.bHardwareEnable := TRUE;
        Main.M2.bPowerSelf := TRUE;
        Main.M2.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M2.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

        Main.M3.bHardwareEnable:= TRUE;
        Main.M3.bPowerSelf := TRUE;
        Main.M3.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M3.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    END_IF

    Main.M2.bLimitForwardEnable := NOT Main.M2.bLimitForwardEnable;
    Main.M2.bLimitBackwardEnable := NOT Main.M2.bLimitBackwardEnable;
    fb_Coil_Roll(stMotionStage := Main.M2);

    Main.M3.bLimitForwardEnable := NOT Main.M3.bLimitForwardEnable;
    Main.M3.bLimitBackwardEnable := NOT Main.M3.bLimitBackwardEnable;
    fb_Coil_Yaw(stMotionStage := Main.M3);

    END_PROGRAM


Related:
    * `Main`_


PRG_GasJetPointing
^^^^^^^^^^^^^^^^^^

::

    PROGRAM PRG_GasJetPointing
    VAR
        fb_GSJP_X : FB_MotionStage;
        fb_GSJP_Z : FB_MotionStage;
        bInit : BOOL := TRUE;
    END_VAR
    IF ( bInit) THEN
        bInit := FALSE;
        Main.M4.bHardwareEnable := TRUE;
        Main.M4.bPowerSelf := TRUE;
        Main.M4.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M4.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

        Main.M5.bHardwareEnable:= TRUE;
        Main.M5.bPowerSelf := TRUE;
        Main.M5.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M5.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
        END_IF

    fb_GSJP_X(stMotionStage := Main.M4);
    fb_GSJP_Z(stMotionStage := Main.M5);

    END_PROGRAM


Related:
    * `Main`_


PRG_GasNozzleXYZ
^^^^^^^^^^^^^^^^

::

    PROGRAM PRG_GasNozzleXYZ
    VAR
        fb_GSJN_X : FB_MotionStage;
        fb_GSJN_Y : FB_MotionStage;
        fb_GSJN_Z : FB_MotionStage;

        bInit : BOOl := TRUE;

    END_VAR
    IF ( bInit) THEN
        bInit := FALSE;
        Main.M6.bHardwareEnable := TRUE;
        Main.M6.bPowerSelf := TRUE;
        Main.M6.fVelocity := 0.05;
        Main.M6.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M6.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

        Main.M7.bHardwareEnable := TRUE;
        Main.M7.bPowerSelf := TRUE;
        Main.M7.fVelocity := 0.05;
        Main.M7.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M7.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

        Main.M8.bHardwareEnable := TRUE;
        Main.M8.bPowerSelf := TRUE;
        Main.M8.fVelocity := 0.05;
        Main.M8.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M8.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    END_IF

    fb_GSJN_X(stMotionStage:=Main.M6);
    fb_GSJN_Y(stMotionStage:=Main.M7);
    fb_GSJN_Z(stMotionStage:=Main.M8);

    END_PROGRAM


Related:
    * `Main`_


PRG_MainChamber
^^^^^^^^^^^^^^^

::

    PROGRAM PRG_MainChamber
    VAR
        fb_MC_Y : FB_MotionStage;
        bInit : BOOL := TRUE;
    END_VAR
    IF ( bInit) THEN
        bInit := FALSE;
        Main.M1.bHardwareEnable := TRUE;
        Main.M1.bPowerSelf := TRUE;
        Main.M1.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
        Main.M1.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
        END_IF

    fb_MC_Y(stMotionStage := Main.M1);

    END_PROGRAM


Related:
    * `Main`_


PRG_PLC_tasks
^^^^^^^^^^^^^

::

    PROGRAM PRG_PLC_tasks
    VAR
        // variables for testing
        axis: AXIS_REF;
        power: MC_POWER;

        retractedLS AT %I* : BOOL;
        extendedLS At %I* :BOOL;

    END_VAR
    (*
       This is to test axis safely by both limit switch enabled.
       manually link the variables "retractedLS" and "extendedLS" to the imit switches inputs

       Standard limit switches are NC, enable/disable both directions directly by limit switches
      if limit swithes are NO, enable/disable the related direction using reversed limit switch reading.

    *)
    power(Axis:=axis, Enable_Positive := retractedLS and extendedLS, Enable_Negative:= extendedLS and retractedLS);
    //power(Axis:=axis, Enable_Positive := NOT retractedLS, Enable_Negative:= NOT extendedLS);

    PRG_GasNozzleXYZ();
    PRG_MainChamber();
    PRG_GasJetPointing();
    PRG_CoilMovers();
    // PRG_SMARACT();

    END_PROGRAM


Related:
    * `PRG_CoilMovers`_
    * `PRG_GasJetPointing`_
    * `PRG_GasNozzleXYZ`_
    * `PRG_MainChamber`_
    * `PRG_SMARACT`_


PRG_SMARACT
^^^^^^^^^^^

::

    PROGRAM PRG_SMARACT
    VAR
        (*
        {attribute 'TcLinkToOSO' := '
            .stDS402Drive.nModeOfOperationNC	:=<0,8,0>TINC^NC-Task 1^Axes^M9_DREAM_DGPD_MMT_Y^Drive^Outputs^Out^nCtrl5;
            .stDS402Drive.nDS402DriveControlNC := <0,8,0>TINC^NC-Task 1^Axes^M9_DREAM_DGPD_MMT_Y^Drive^Outputs^Out^nCtrl1;
            .stDS402Drive.nDS402DriveControlNC := <8,8,0>TINC^NC-Task 1^Axes^M9_DREAM_DGPD_MMT_Y^Drive^Outputs^Out^nCtrl2
        '}
        {attribute 'TcLinkTo' := '
            .stDS402Drive.nSlaveAddr:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^InfoData^AdsAddr^port;
            .stDS402Drive.stDS402DriveStatus:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:Y^mode/status/pos/fError TxPDO^Status Word;
            .stDS402Drive.nFollowingError:=;TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:Y^mode/status/pos/fError TxPDO^Following Error Actual Value;
            .stDS402Drive.nModeOfOperation:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:Y^ctl/mode/pos RxPDO^Modes of Operation;
            .stDS402Drive.nModeOfOperationDisplay:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:Y^mode/status/pos/fError TxPDO^Modes of Operation Display;
            .stDS402Drive.nDS402DriveControl:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:Y^ctl/mode/pos RxPDO^Control Word
        '}
        fb_DGPD_Y : FB_MotionStageMCS2CSP ( stPiezoStage:=Main.M9, eModule:=E_Module.CHAN1 );
             {attribute 'TcLinkToOSO' := '
            .stDS402Drive.nModeOfOperationNC	:=<0,8,0>TINC^NC-Task 1^Axes^M10_DREAM_DGPD_MMT_X^Drive^Outputs^Out^nCtrl5;
            .stDS402Drive.nDS402DriveControlNC := <0,8,0>TINC^NC-Task 1^Axes^M10_DREAM_DGPD_MMT_X^Drive^Outputs^Out^nCtrl1;
            .stDS402Drive.nDS402DriveControlNC := <8,8,0>TINC^NC-Task 1^Axes^M10_DREAM_DGPD_MMT_X^Drive^Outputs^Out^nCtrl2
        '}
        {attribute 'TcLinkTo' := '
            .stDS402Drive.nSlaveAddr:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^InfoData^AdsAddr^port;
            .stDS402Drive.stDS402DriveStatus:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:X^mode/status/pos/fError TxPDO^Status Word;
            .stDS402Drive.nFollowingError:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:X^mode/status/pos/fError TxPDO^Following Error Actual Value;
            .stDS402Drive.nModeOfOperation:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:X^ctl/mode/pos RxPDO^Modes of Operation;
            .stDS402Drive.nModeOfOperationDisplay:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:X^mode/status/pos/fError TxPDO^Modes of Operation Display;
            .stDS402Drive.nDS402DriveControl:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:X^ctl/mode/pos RxPDO^Control Word
        '}
        fb_DGPD_X : FB_MotionStageMCS2CSP ( stPiezoStage:=Main.M10, eModule:=E_Module.CHAN2 );
           {attribute 'TcLinkToOSO' := '
            .stDS402Drive.nModeOfOperationNC	:=<0,8,0>TINC^NC-Task 1^Axes^M11_DREAM_DGPD_MMT_RET^Drive^Outputs^Out^nCtrl5;
            .stDS402Drive.nDS402DriveControlNC := <0,8,0>TINC^NC-Task 1^Axes^M11_DREAM_DGPD_MMT_RET^Drive^Outputs^Out^nCtrl1;
            .stDS402Drive.nDS402DriveControlNC := <8,8,0>TINC^NC-Task 1^Axes^M11_DREAM_DGPD_MMT_RET^Drive^Outputs^Out^nCtrl2
        '}
        {attribute 'TcLinkTo' := '
            .stDS402Drive.nSlaveAddr:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^InfoData^AdsAddr^port;
            .stDS402Drive.stDS402DriveStatus:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:RET^mode/status/pos/fError TxPDO^Status Word;
            .stDS402Drive.nFollowingError:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:RET^mode/status/pos/fError TxPDO^Following Error Actual Value;
            .stDS402Drive.nModeOfOperation:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:RET^ctl/mode/pos RxPDO^Modes of Operation;
            .stDS402Drive.nModeOfOperationDisplay:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:RET^mode/status/pos/fError TxPDO^Modes of Operation Display;
            .stDS402Drive.nDS402DriveControl:=TIID^Device 1 (EtherCAT)^B940_009_R19_DRL_02_E0_EK1200^R19_DRL_02_E4_EK1122^TMO-DREAM-SMARACT-03^DREAM:DGPD:MMT:RET^ctl/mode/pos RxPDO^Control Word
        '}
        fb_DGPD_RET : FB_MotionStageMCS2CSP ( stPiezoStage:=Main.M11, eModule:=E_Module.CHAN3 );

        stDGPD_RET: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;

        {attribute 'pytmc' := '
              pv: DGPD:RET:STATES:SET
              io: io
        '}
         stDGPD_RET_Set: ENUM_AxisStates;
            {attribute 'pytmc' := '
              pv: DGPD:RET:STATES:GET
              io: i
            '}
        stDGPD_RET_Get: ENUM_AxisStates;

        fbDGPD_RET_PMPStates: FB_PositionStatePMPS1D;
        *)
    END_VAR
    (*
    fbDGPD_RET_PMPStates(
        stMotionStage:=Main.M11,
        astPositionState:=stDGPD_RET,
        eEnumSet:=stDGPD_RET_Set,
        eEnumGet:=stDGPD_RET_Get,
        sDeviceName := 'DREAM:DGPD:MMT:RET',
        sTransitionKey := 'DREAM:DGPD:MMT:RET-TRANSITION',
        fbFFHWO:=GVL_PMPS.fbFastFaultOutput1,
        fbArbiter:=GVL_PMPS.fbArbiter1,
        bEnableMotion:=TRUE,
        bEnableBeamParams:=TRUE,
        bEnablePositionLimits:=TRUE,
        bReadDBNow:=TRUE,
    );

    fb_DGPD_RET();
    fb_DGPD_X();
    fb_DGPD_Y();
    *)

    END_PROGRAM


Related:
    * `ENUM_AxisStates`_
    * `GVL_PMPS`_
    * `Main`_

